{
   "articles": [
      {
         "id": "1",
         "title": "Классы в ES6",
         "text": "В ES6 представили новый синтаксис для классов. Здесь стоит отметить, что класс ES6 не представляет собой новую объектно-ориентированную модель наследования. Это просто синтаксический сахар для существующего в JavaScript прототипного наследования.",
         "date": "2018-10-12T13:40:00.427Z",
         "author": "SazanYa",
         "comments": [
            {
               "id": "1",
               "articleId": "1",
               "text": "comment1",
               "date": "2018-10-12T13:51:50.417Z",
               "author": "Bogdan"
            },
            {
               "id": "2",
               "articleId": "1",
               "text": "comment2",
               "date": "2018-10-12T14:13:50.417Z",
               "author": "Mixer"
            }
         ]
      },
      {
         "id": "2",
         "title": "Set и WeakSet",
         "text": "Объекты Set это коллекции уникальных значений. Дублированные значения игнорируются, т.к. коллекция должна содержать только уникальные значения. Значения могут быть примитивами или ссылками на объекты.",
         "date": "2018-10-13T13:40:00.427Z",
         "author": "Alex",
         "comments": [
            {
               "id": "1",
               "articleId": "2",
               "text": "comment1",
               "date": "2018-10-13T13:51:50.417Z",
               "author": "Sara"
            },
            {
               "id": "2",
               "articleId": "2",
               "text": "comment2",
               "date": "2018-10-13T14:13:50.417Z",
               "author": "Connor"
            }
         ]
      },
      {
         "id": "3",
         "title": "Тип данных Symbol",
         "text": "Symbol это уникальный и неизменяемый тип данных, представленный в ES6. Целью Symbol является создание уникального идентификатора, к которому нельзя получить доступ.",
         "date": "2018-10-14T13:40:00.427Z",
         "author": "Mixer",
         "comments": [
            {
               "id": "1",
               "articleId": "3",
               "text": "comment1",
               "date": "2018-10-14T13:51:50.417Z",
               "author": "Alex"
            },
            {
               "id": "2",
               "articleId": "3",
               "text": "comment2",
               "date": "2018-10-14T14:13:50.417Z",
               "author": "SazanYa"
            }
         ]
      },
      {
         "title": "Промисы",
         "text": "В ES6 появилась встроенная поддержка промисов. Промис это объект, который ждёт выполнения асинхронной операции, после которого (т.е. после выполнения) промис принимает одно из двух состояний: fulfilled (resolved, успешное выполнение) или rejected (выполнено с ошибкой).",
         "date": "2018-11-01T15:24:01.659Z",
         "author": "etnolover",
         "id": "4",
         "comments": []
      }
   ]
}